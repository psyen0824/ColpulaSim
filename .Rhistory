colnames(non_paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values2, smp)
data_combine = cbind(rep(1:S, each = N*d),
wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim$data.sim,
as.vector(as.matrix(paraBoot_sim[,-c(1,2)])),
as.vector(as.matrix(non_paraBoot_sim[,-c(1,2)])))
colnames(data_combine) <- c("sim.id" ,"id" ,"col.num","col.name","data.input",
"sim.copula","sim.para","sim.nonpara")
mean_comapre <- rbind(
compare_sim_method(object = data_combine[,c(1:5,6)], method = "copula", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,7)], method = "para_B", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,8)], method = "nonpara_B", data.true = list(mean = mu, sd = sd)))
average_mean_performance <- mean_comapre %>%
group_by(method) %>%
summarise( mean.RMSE = mean(simu.mean.RMSE),
mean.length.ci = mean( simu.length.ci))
return(list(data_combine  = as.data.frame(data_combine),
mean_comapre = mean_comapre,
average_mean_performance = average_mean_performance,
data.emperical.wide = test_data,
data.emperical.long = wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim  = coupla_sim,
paraBoot_sim = paraBoot_sim,
non_paraBoot_sim = non_paraBoot_sim))
}
test1 <- generate_sim_data(seed = 101, N = 30, d = 10, Nsim = 30, S = 100, mu = 0, sd = 1, rho = 0.3)
############################################### Presentation Simulation 2022_07_10
###### function: wide form to long form
wide_to_long <- function(data.input, S){
library(magrittr)
colname.df <- tibble( col.num = seq.int(1L, ncol(data.input)),
col.name = colnames(data.input))
data.df <- cbind(
rep(0,  nrow(data.input)),
rep(1:nrow(data.input), ncol(data.input)),
rep(seq.int(1L, ncol(data.input)), each = nrow(data.input))
) %>%
set_colnames(c("sim.id","id", "col.num")) %>%
as_tibble %>%
left_join(colname.df, by = "col.num")
data.df$data.input <- as.vector(as.matrix(data.input))
return(do.call("rbind", replicate(S, data.df, simplify = FALSE)))
}
###### function: mean comparison
compare_sim_method <- function(object, method, data.true) {
colnames(object) <- c("sim.id" ,"id" ,"col.num","col.name","data.input","data.sim")
true.stat.df <- data.frame(
col.num = 1:max(unique(object$col.num)),
true.mean = round( data.true$mean , 4),
true.sd = round( data.true$sd, 4))
empir.stat.df <- object %>%
filter(sim.id == 1) %>%
group_by( .data$col.num) %>%
summarise(
empir.sample = n(),
empir.mean = round(mean(.data$data.input), 4),
empir.sd = round(sd(.data$data.input), 4),
)
size.stat.df <- object %>%
group_by(.data$col.num) %>%
summarise(
simu.sample = max(.data$id),
n.simu = max(.data$sim.id),
)
simu.diff.df <- object %>%
group_split(.data$sim.id) %>%
lapply(function(sim.df){
sim.df %>%
group_by(.data$col.num) %>%
summarise(
simu.mean = mean(.data$data.sim),
simu.sd = sd(.data$data.sim),
simu.lower.limit = simu.mean + qnorm(0.025)*(simu.sd/sqrt(max(.data$sim.id))),
simu.upper.limit = simu.mean + qnorm(0.975)*(simu.sd/sqrt(max(.data$sim.id))),
) %>%
left_join(true.stat.df, c("col.num")) %>%
mutate(
simu.mean.ci.coverge =  ifelse( .data$true.mean >= .data$simu.lower.limit & .data$true.mean <= .data$simu.upper.limit , 1, 0),
simu.mean.RB = (.data$simu.mean - .data$true.mean)/.data$true.mean*100,
simu.mean.SB = abs(.data$simu.mean - .data$true.mean)/.data$simu.sd*100,
simu.mean.RMSE = (.data$simu.mean - .data$true.mean)^2
)
}) %>%
bind_rows %>%
group_by( .data$col.num) %>%
summarise(
simu.mean = round(mean(.data$simu.mean),4),
simu.sd = round(mean(.data$simu.sd),4),
simu.mean.ci.coverge = round(mean(.data$simu.mean.ci.coverge),4),
simu.mean.RB = round(mean(.data$simu.mean.RB),4),
simu.mean.SB = round(mean(.data$simu.mean.SB),4),
simu.mean.RMSE = round(sqrt(mean(.data$simu.mean.RMSE)),4)
)
simu.ci.df <- object %>%
group_split(.data$sim.id) %>%
lapply(function(sim.df){
sim.df %>%
group_by(.data$col.num) %>%
summarise(
simu.mean = mean(.data$data.sim),
)
}) %>%
bind_rows %>%
group_by(.data$col.num) %>%
summarise(
simu.lower.ci = round(quantile(.data$simu.mean, probs = 0.025),4),
simu.upper.ci = round(quantile(.data$simu.mean, probs = 0.975),4),
simu.length.ci = simu.upper.ci - simu.lower.ci
)
comparison.result.df <- true.stat.df %>%
left_join(empir.stat.df, c("col.num")) %>%
left_join(size.stat.df, c("col.num")) %>%
left_join(simu.diff.df, c("col.num")) %>%
left_join(simu.ci.df, c("col.num")) %>%
mutate(marginal.name = unique(object$col.name),
method = method) %>%
select(
.data$method, .data$marginal.name, .data$empir.sample, .data$simu.sample,
.data$n.simu, .data$true.mean, .data$empir.mean, .data$simu.mean,
.data$simu.mean.RB, .data$simu.mean.SB, .data$simu.mean.RMSE, .data$simu.mean.ci.coverge,
.data$simu.lower.ci, .data$simu.upper.ci, .data$simu.length.ci,
.data$true.sd, .data$empir.sd, .data$simu.sd
) %>% ungroup
return(comparison.result.df)
}
#################### generate simulated data
library(dplyr)
library(mvtnorm)
library(MixMatrix) # Generate a compound symmetric correlation matrix - function CSgenerate
# data 1: # of outcome = 1, type = normal, dim = 10, cor =  compound symmetric correlation
generate_sim_data <- function(seed = 101, N = 100, d = 5, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3){
set.seed(seed)
sd_data <- rep(sd,d) # standard deviation
cov_data <- diag(sd_data) %*% CSgenerate(n = d, rho = rho) %*% diag(sd_data)
test_data <- as.data.frame(cbind(rep(1:N),rmvnorm(n = N, mean = rep(mu, d), sigma = cov_data, method="svd")))
colnames(test_data) <- c("id",paste0("out_A_", 1:d))
# Copula Simulation
copula <- copula.sim( data.input = test_data[,-1], id.vec = 1:N, arm.vec = rep(1,N),
n.patient = Nsim , n.simulation = S, seed = seed , validation.type = "none", verbose = FALSE)
copula_compare <- compare.copula.sim(copula)
coupla_sim <- copula$data.simul %>% select(-arm)
# Parametric Bootstrap Simulation
meanV = matrix(apply(test_data[,-1], 2, mean))
covM = as.matrix(cov(test_data[,-1]))
values = values.tmp <- list()
for(s in 1:S){
values[[s]] <- cbind(rep(s,Nsim), 1:N ,rmvnorm(Nsim, mean=meanV, sigma=covM, method = 'svd'))
}
paraBoot_sim <- as.data.frame(do.call(rbind, values))
colnames(paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values)
# non-parametric bootstrap
indiv <- unique(test_data)$id
values2 <- smp <- list()
for(s in 1:S){ smp[[s]] <- data.frame(id=sample(indiv, N, replace=TRUE))
values2[[s]] <- cbind(rep(s,Nsim), left_join(smp[[s]], test_data, by='id'))}
non_paraBoot_sim <- as.data.frame(do.call(rbind, values2))
colnames(non_paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values2, smp)
data_combine = cbind(rep(1:S, each = N*d),
wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim$data.sim,
as.vector(as.matrix(paraBoot_sim[,-c(1,2)])),
as.vector(as.matrix(non_paraBoot_sim[,-c(1,2)])))
colnames(data_combine) <- c("sim.id" ,"id" ,"col.num","col.name","data.input",
"sim.copula","sim.para","sim.nonpara")
mean_comapre <- rbind(
compare_sim_method(object = data_combine[,c(1:5,6)], method = "copula", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,7)], method = "para_B", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,8)], method = "nonpara_B", data.true = list(mean = mu, sd = sd)))
average_mean_performance <- mean_comapre %>%
group_by(method) %>%
summarise( mean.RMSE = mean(simu.mean.RMSE),
mean.length.ci = mean( simu.length.ci))
return(list(data_combine  = as.data.frame(data_combine),
mean_comapre = mean_comapre,
average_mean_performance = average_mean_performance,
data.emperical.wide = test_data,
data.emperical.long = wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim  = coupla_sim,
paraBoot_sim = paraBoot_sim,
non_paraBoot_sim = non_paraBoot_sim))
}
test1 <- generate_sim_data(seed = 101, N = 30, d = 10, Nsim = 30, S = 100, mu = 0, sd = 1, rho = 0.3)
test1$mean_comapre
test1$average_mean_performance
View(test1$mean_comapre)
test_N100<- generate_sim_data(seed = 101, N = 100, d = 2, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3)
#################### generate simulated data
library(dplyr)
library(mvtnorm)
library(MixMatrix) # Generate a compound symmetric correlation matrix - function CSgenerate
# data 1: # of outcome = 1, type = normal, dim = 10, cor =  compound symmetric correlation
generate_sim_data <- function(seed = 101, N = 100, d = 5, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3){
set.seed(seed)
sd_data <- rep(sd,d) # standard deviation
cov_data <- diag(sd_data) %*% CSgenerate(n = d, rho = rho) %*% diag(sd_data)
test_data <- as.data.frame(cbind(rep(1:N),rmvnorm(n = N, mean = rep(mu, d), sigma = cov_data, method="svd")))
colnames(test_data) <- c("id",paste0("out_A_", 1:d))
# Copula Simulation
copula <- copula.sim( data.input = test_data[,-1], id.vec = 1:N, arm.vec = rep(1,N),
n.patient = Nsim , n.simulation = S, seed = seed , validation.type = "none", verbose = FALSE)
copula_compare <- compare.copula.sim(copula)
coupla_sim <- copula$data.simul %>% select(-arm)
# Parametric Bootstrap Simulation
meanV = matrix(apply(test_data[,-1], 2, mean))
covM = as.matrix(cov(test_data[,-1]))
values = values.tmp <- list()
for(s in 1:S){
values[[s]] <- cbind(rep(s,Nsim), 1:N ,rmvnorm(Nsim, mean=meanV, sigma=covM, method = 'svd'))
}
paraBoot_sim <- as.data.frame(do.call(rbind, values))
colnames(paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values)
# non-parametric bootstrap
indiv <- unique(test_data)$id
values2 <- smp <- list()
for(s in 1:S){ smp[[s]] <- data.frame(id=sample(indiv, N, replace=TRUE))
values2[[s]] <- cbind(rep(s,Nsim), left_join(smp[[s]], test_data, by='id'))}
non_paraBoot_sim <- as.data.frame(do.call(rbind, values2))
colnames(non_paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values2, smp)
data_combine = cbind(rep(1:S, each = N*d),
wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim$data.sim,
as.vector(as.matrix(paraBoot_sim[,-c(1,2)])),
as.vector(as.matrix(non_paraBoot_sim[,-c(1,2)])))
colnames(data_combine) <- c("sim.id" ,"id" ,"col.num","col.name","data.input",
"sim.copula","sim.para","sim.nonpara")
mean_comapre <- rbind(
compare_sim_method(object = data_combine[,c(1:5,6)], method = "copula", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,7)], method = "para_B", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,8)], method = "nonpara_B", data.true = list(mean = mu, sd = sd)))
average_mean_performance <- mean_comapre %>%
group_by(method) %>%
summarise( mean.RMSE = mean(simu.mean.RMSE),
mean.MCP = mean(simu.mean.ci.coverge),
mean.length.ci = mean( simu.length.ci))
return(list(data_combine  = as.data.frame(data_combine),
mean_comapre = mean_comapre,
average_mean_performance = average_mean_performance,
data.emperical.wide = test_data,
data.emperical.long = wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim  = coupla_sim,
paraBoot_sim = paraBoot_sim,
non_paraBoot_sim = non_paraBoot_sim))
}
test_N30 <- generate_sim_data(seed = 101, N = 30, d = 10, Nsim = 30, S = 100, mu = 0, sd = 1, rho = 0.3)
test_N100<- generate_sim_data(seed = 101, N = 100, d = 2, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3)
View(test_N30$mean_compare)
test_N30$mean_compare
View(test_N100$mean_comapre)
View(test_N100$average_mean_performance)
test_N50 <- generate_sim_data(seed = 101, N = 50, d = 10, Nsim = 50, S = 100, mu = 0, sd = 1, rho = 0.3)
test_N50$mean_comapre
View(test_N50$mean_comapre)
test_N50$average_mean_performance
test_N30$average_mean_performance
test_N100$average_mean_performance
test_N30 <- generate_sim_data(seed = 101, N = 30, d = 10, Nsim = 30, S = 100, mu = 0, sd = 1, rho = 0.3)
test_N50 <- generate_sim_data(seed = 101, N = 50, d = 10, Nsim = 50, S = 100, mu = 0, sd = 1, rho = 0.3)
test_N100<- generate_sim_data(seed = 101, N = 100, d = 10, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3)
View(test_N30$mean_comapre)
test_N30$average_mean_performance
test_N30$average_mean_performance$mean.MCP
seq(10, 100, by=10
seq(10, 100, by=10)
10: seq(20, 100, by=10)
seq(10, 100, by=10
seq(10, 100, by=10)
test_N30$average_mean_performance$mean.RMSE
test_N30$average_mean_performance$mean.MCP
result = list()
MCP = list()
for (N in seq(10, 100, by=10)){
result[[N]] <- generate_sim_data(seed = 101, N = N, d = 10, Nsim = N, S = 100, mu = 0, sd = 1, rho = 0.3)
MCP[[N]] <- result[[N]]$average_mean_performance$mean.MCP
}
MCP_final = as.data.frame(do.call(rbind, MCP))
MCP_final
result[[100]]$average_mean_performance
result = MCP = RMSE = list()
for (N in seq(10, 150, by=10)){
result[[N]] <- generate_sim_data(seed = 101, N = N, d = 10, Nsim = N, S = 100, mu = 0, sd = 1, rho = 0.3)
MCP[[N]] <- result[[N]]$average_mean_performance$mean.MCP
RMSE[[N]] <- result[[N]]$average_mean_performance$mean.RMSE
}
MCP_final = as.data.frame(do.call(rbind, MCP))
RMSE_final = as.data.frame(do.call(rbind, RMSE))
MCP_final
RMSE_final
MCP[[100]]
result[[100]]$average_mean_performance$mean.MCP
result[[100]]$average_mean_performance
result = MCP = RMSE = list()
for (N in seq(10, 200, by=10)){
result[[N]] <- generate_sim_data(seed = 999, N = N, d = 10, Nsim = N, S = 100, mu = 0, sd = 1, rho = 0.3)
MCP[[N]] <- result[[N]]$average_mean_performance$mean.MCP
RMSE[[N]] <- result[[N]]$average_mean_performance$mean.RMSE
}
MCP_final = as.data.frame(do.call(rbind, MCP))
RMSE_final = as.data.frame(do.call(rbind, RMSE))
MCP_final
RMSE_final
MCP_final %>% `colnames<-`("copula","non_para_B", "para_B")
MCP_final %>% `colnames<-`c("copula","non_para_B", "para_B")
M = MCP_final %>%  colnames<-c("copula","non_para_B","para_B")
M = MCP_final %>% 'colnames'<-c("copula","non_para_B","para_B")
M = MCP_final %>% 'colnames<-'c("copula","non_para_B","para_B")
M = MCP_final %>% 'colnames<-'(c("copula","non_para_B","para_B"))
M
seq(10, 200, by=10)
rep(d, length(seq(N_min, Nmax, by=range))
rep(d, length(seq(N_min, Nmax, by=range)))
result[[N]]$average_mean_performance
perform <- function(N_min, Nmax, range, d){
result = final_temp = list()
for (N in seq(N_min, Nmax, by=range)){
result[[N]] <- generate_sim_data(seed = 999, N = N, d = d, Nsim = N, S = 100, mu = 0, sd = 1, rho = 0.3)
final_temp[[N]] <- cbind(N = rep(N, 3), result[[N]]$average_mean_performance$mean.MCP)
}
final <- as.data.frame(do.call(rbind, final_temp))
return(final)
}
p_d2 = perform(N_min = 10, Nmax = 150, range = 10, d = 2)
perform <- function(N_min, Nmax, range, d){
result = final_temp = list()
for (N in seq(N_min, Nmax, by=range)){
result[[N]] <- generate_sim_data(seed = 999, N = N, d = d, Nsim = N, S = 100, mu = 0, sd = 1, rho = 0.3)
final_temp[[N]] <- cbind(N = rep(N, 3), result[[N]]$average_mean_performance)
}
final <- as.data.frame(do.call(rbind, final_temp))
return(final)
}
p_d2 = perform(N_min = 10, Nmax = 20, range = 10, d = 2)
p_d2
p_d2 = perform(N_min = 10, Nmax = 150, range = 10, d = 2)
p_d2
perform <- function(N_min, Nmax, range, d, S){
result = final_temp = list()
for (N in seq(N_min, Nmax, by=range)){
result[[N]] <- generate_sim_data(seed = 999, N = N, d = d, Nsim = N, S = S, mu = 0, sd = 1, rho = 0.3)
final_temp[[N]] <- cbind(N = rep(N, 3), result[[N]]$average_mean_performance)
}
final <- as.data.frame(do.call(rbind, final_temp))
return(final)
}
p_d2 = perform(N_min = 10, Nmax = 150, range = 10, d = 2, S = 1000)
p_d2
p_d10 = perform(N_min = 10, Nmax = 150, range = 10, d = 10, S = 1000)
p_d10
############################################### Presentation Simulation 2022_07_10
###### function: wide form to long form
wide_to_long <- function(data.input, S){
library(magrittr)
colname.df <- tibble( col.num = seq.int(1L, ncol(data.input)),
col.name = colnames(data.input))
data.df <- cbind(
rep(0,  nrow(data.input)),
rep(1:nrow(data.input), ncol(data.input)),
rep(seq.int(1L, ncol(data.input)), each = nrow(data.input))
) %>%
set_colnames(c("sim.id","id", "col.num")) %>%
as_tibble %>%
left_join(colname.df, by = "col.num")
data.df$data.input <- as.vector(as.matrix(data.input))
return(do.call("rbind", replicate(S, data.df, simplify = FALSE)))
}
###### function: mean comparison
compare_sim_method <- function(object, method, data.true) {
colnames(object) <- c("sim.id" ,"id" ,"col.num","col.name","data.input","data.sim")
true.stat.df <- data.frame(
col.num = 1:max(unique(object$col.num)),
true.mean = round( data.true$mean , 4),
true.sd = round( data.true$sd, 4))
empir.stat.df <- object %>%
filter(sim.id == 1) %>%
group_by( .data$col.num) %>%
summarise(
empir.sample = n(),
empir.mean = round(mean(.data$data.input), 4),
empir.sd = round(sd(.data$data.input), 4),
)
size.stat.df <- object %>%
group_by(.data$col.num) %>%
summarise(
simu.sample = max(.data$id),
n.simu = max(.data$sim.id),
)
simu.diff.df <- object %>%
group_split(.data$sim.id) %>%
lapply(function(sim.df){
sim.df %>%
group_by(.data$col.num) %>%
summarise(
simu.mean = mean(.data$data.sim),
simu.sd = sd(.data$data.sim),
simu.lower.limit = simu.mean + qnorm(0.025)*(simu.sd/sqrt(max(.data$sim.id))),
simu.upper.limit = simu.mean + qnorm(0.975)*(simu.sd/sqrt(max(.data$sim.id))),
) %>%
left_join(empir.stat.df, c("col.num")) %>%
mutate(
simu.mean.ci.coverge =  ifelse( .data$empir.mean >= .data$simu.lower.limit & .data$empir.mean <= .data$simu.upper.limit , 1, 0),
simu.mean.RB = (.data$simu.mean - .data$empir.mean)/.data$empir.mean*100,
simu.mean.SB = abs(.data$simu.mean - .data$empir.mean)/.data$simu.sd*100,
simu.mean.RMSE = (.data$simu.mean - .data$empir.mean)^2
)
}) %>%
bind_rows %>%
group_by( .data$col.num) %>%
summarise(
simu.mean = round(mean(.data$simu.mean),4),
simu.sd = round(mean(.data$simu.sd),4),
simu.mean.ci.coverge = round(mean(.data$simu.mean.ci.coverge),4),
simu.mean.RB = round(mean(.data$simu.mean.RB),4),
simu.mean.SB = round(mean(.data$simu.mean.SB),4),
simu.mean.RMSE = round(sqrt(mean(.data$simu.mean.RMSE)),4)
)
simu.ci.df <- object %>%
group_split(.data$sim.id) %>%
lapply(function(sim.df){
sim.df %>%
group_by(.data$col.num) %>%
summarise(
simu.mean = mean(.data$data.sim),
)
}) %>%
bind_rows %>%
group_by(.data$col.num) %>%
summarise(
simu.lower.ci = round(quantile(.data$simu.mean, probs = 0.025),4),
simu.upper.ci = round(quantile(.data$simu.mean, probs = 0.975),4),
simu.length.ci = simu.upper.ci - simu.lower.ci
)
comparison.result.df <- true.stat.df %>%
left_join(empir.stat.df, c("col.num")) %>%
left_join(size.stat.df, c("col.num")) %>%
left_join(simu.diff.df, c("col.num")) %>%
left_join(simu.ci.df, c("col.num")) %>%
mutate(marginal.name = unique(object$col.name),
method = method) %>%
select(
.data$method, .data$marginal.name, .data$empir.sample, .data$simu.sample,
.data$n.simu, .data$true.mean, .data$empir.mean, .data$simu.mean,
.data$simu.mean.RB, .data$simu.mean.SB, .data$simu.mean.RMSE, .data$simu.mean.ci.coverge,
.data$simu.lower.ci, .data$simu.upper.ci, .data$simu.length.ci,
.data$true.sd, .data$empir.sd, .data$simu.sd
) %>% ungroup
return(comparison.result.df)
}
#################### generate simulated data
library(dplyr)
library(mvtnorm)
library(MixMatrix) # Generate a compound symmetric correlation matrix - function CSgenerate
# data 1: # of outcome = 1, type = normal, dim = 10, cor =  compound symmetric correlation
generate_sim_data <- function(seed = 101, N = 100, d = 5, Nsim = 100, S = 100, mu = 0, sd = 1, rho = 0.3){
set.seed(seed)
sd_data <- rep(sd,d) # standard deviation
cov_data <- diag(sd_data) %*% CSgenerate(n = d, rho = rho) %*% diag(sd_data)
test_data <- as.data.frame(cbind(rep(1:N),rmvnorm(n = N, mean = rep(mu, d), sigma = cov_data, method="svd")))
colnames(test_data) <- c("id",paste0("out_A_", 1:d))
# Copula Simulation
copula <- copula.sim( data.input = test_data[,-1], id.vec = 1:N, arm.vec = rep(1,N),
n.patient = Nsim , n.simulation = S, seed = seed , validation.type = "none", verbose = FALSE)
copula_compare <- compare.copula.sim(copula)
coupla_sim <- copula$data.simul %>% select(-arm)
# Parametric Bootstrap Simulation
meanV = matrix(apply(test_data[,-1], 2, mean))
covM = as.matrix(cov(test_data[,-1]))
values = values.tmp <- list()
for(s in 1:S){
values[[s]] <- cbind(rep(s,Nsim), 1:N ,rmvnorm(Nsim, mean=meanV, sigma=covM, method = 'svd'))
}
paraBoot_sim <- as.data.frame(do.call(rbind, values))
colnames(paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values)
# non-parametric bootstrap
indiv <- unique(test_data)$id
values2 <- smp <- list()
for(s in 1:S){ smp[[s]] <- data.frame(id=sample(indiv, N, replace=TRUE))
values2[[s]] <- cbind(rep(s,Nsim), left_join(smp[[s]], test_data, by='id'))}
non_paraBoot_sim <- as.data.frame(do.call(rbind, values2))
colnames(non_paraBoot_sim) <- c("sim.id", "id", paste0("out_A_", 1:d))
rm(values2, smp)
data_combine = cbind(rep(1:S, each = N*d),
wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim$data.sim,
as.vector(as.matrix(paraBoot_sim[,-c(1,2)])),
as.vector(as.matrix(non_paraBoot_sim[,-c(1,2)])))
colnames(data_combine) <- c("sim.id" ,"id" ,"col.num","col.name","data.input",
"sim.copula","sim.para","sim.nonpara")
mean_comapre <- rbind(
compare_sim_method(object = data_combine[,c(1:5,6)], method = "copula", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,7)], method = "para_B", data.true = list(mean = mu, sd = sd)),
compare_sim_method(object = data_combine[,c(1:5,8)], method = "nonpara_B", data.true = list(mean = mu, sd = sd)))
average_mean_performance <- mean_comapre %>%
group_by(method) %>%
summarise( mean.RMSE = mean(simu.mean.RMSE),
mean.MCP = mean(simu.mean.ci.coverge),
mean.length.ci = mean( simu.length.ci))
return(list(data_combine  = as.data.frame(data_combine),
mean_comapre = mean_comapre,
average_mean_performance = average_mean_performance,
data.emperical.wide = test_data,
data.emperical.long = wide_to_long(test_data[,-1], S = S)[,-1],
coupla_sim  = coupla_sim,
paraBoot_sim = paraBoot_sim,
non_paraBoot_sim = non_paraBoot_sim))
}
test_N30_d10 <- generate_sim_data(seed = 101, N = 30, d = 10, Nsim = 30, S = 100, mu = 0, sd = 1, rho = 0.3)
library(copulaSim)
